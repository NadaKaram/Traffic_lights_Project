
second_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001a76  00001b0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006a  0080006a  00001b14  2**0
                  ALLOC
  3 .stab         00001d1c  00000000  00000000  00001b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000103c  00000000  00000000  00003830  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000486c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000049ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006765  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007650  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008400  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008560  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000087ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008fbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 35 0c 	jmp	0x186a	; 0x186a <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <main>
      8a:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer2_Delay>:
uint8_t ovf=0;
#define NUMBR_OF_TICKS_PER_FIVE_SECONDS 20

uint8_t Yellow_state;
void Timer2_Delay(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 0; // Set Timer0 initial value to 0
     b4e:	e4 e4       	ldi	r30, 0x44	; 68
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	10 82       	st	Z, r1
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR2 = (1<<FOC2) | (1<<CS22) | (1<<CS20) | (1<<CS21);
     b54:	e5 e4       	ldi	r30, 0x45	; 69
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	87 e8       	ldi	r24, 0x87	; 135
     b5a:	80 83       	st	Z, r24

	while(!(TIFR & (1<<TOV2))); // Wait until the Timer0 Overflow occurs (wait until TOV0 = 1)
     b5c:	e8 e5       	ldi	r30, 0x58	; 88
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	88 2f       	mov	r24, r24
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	80 74       	andi	r24, 0x40	; 64
     b68:	90 70       	andi	r25, 0x00	; 0
     b6a:	00 97       	sbiw	r24, 0x00	; 0
     b6c:	b9 f3       	breq	.-18     	; 0xb5c <Timer2_Delay+0x16>

	TIFR |= (1<<TOV2); // Clear TOV0 bit by set its value
     b6e:	a8 e5       	ldi	r26, 0x58	; 88
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	e8 e5       	ldi	r30, 0x58	; 88
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	80 64       	ori	r24, 0x40	; 64
     b7a:	8c 93       	st	X, r24

	TCCR2 = 0; // Stop Timer0 by clear the Clock bits (CS00, CS01 and CS02)
     b7c:	e5 e4       	ldi	r30, 0x45	; 69
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	10 82       	st	Z, r1
}
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	08 95       	ret

00000b88 <TIMER0_Init_Normal_Mode>:

void TIMER0_Init_Normal_Mode(void)
{
     b88:	df 93       	push	r29
     b8a:	cf 93       	push	r28
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
     b90:	e3 e5       	ldi	r30, 0x53	; 83
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	10 82       	st	Z, r1
	TCCR0 |= (1<<FOC0);
     b96:	a3 e5       	ldi	r26, 0x53	; 83
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e3 e5       	ldi	r30, 0x53	; 83
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	80 68       	ori	r24, 0x80	; 128
     ba2:	8c 93       	st	X, r24
}
     ba4:	cf 91       	pop	r28
     ba6:	df 91       	pop	r29
     ba8:	08 95       	ret

00000baa <TIMER0_Enable_Interrupt_Normal_Mode>:
//enable global interrupt and timer overflow interrupt enable
void TIMER0_Enable_Interrupt_Normal_Mode(void)
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
	SREG|=(1<<7);
     bb2:	af e5       	ldi	r26, 0x5F	; 95
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ef e5       	ldi	r30, 0x5F	; 95
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	80 68       	ori	r24, 0x80	; 128
     bbe:	8c 93       	st	X, r24
	TIMSK |= (1<<TOIE0);
     bc0:	a9 e5       	ldi	r26, 0x59	; 89
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e9 e5       	ldi	r30, 0x59	; 89
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	81 60       	ori	r24, 0x01	; 1
     bcc:	8c 93       	st	X, r24
}
     bce:	cf 91       	pop	r28
     bd0:	df 91       	pop	r29
     bd2:	08 95       	ret

00000bd4 <TIMER0_Set_Normal_Mode>:
 * For clock=1Mhz and prescale F_CPU/1024 every count will take 1ms
 * so put initial timer counter = 0  0 --> 255 (256ms per overflow)
 * so we need timer to overflow 2 times to get a 0.5 second
 */
void TIMER0_Set_Normal_Mode(void)
{
     bd4:	df 93       	push	r29
     bd6:	cf 93       	push	r28
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<CS02) | (1<<CS00);
     bdc:	e3 e5       	ldi	r30, 0x53	; 83
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	85 e0       	ldi	r24, 0x05	; 5
     be2:	80 83       	st	Z, r24

}
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <TIMER0_Set_Initial_Normal_Mode>:
void TIMER0_Set_Initial_Normal_Mode(int initial_value)
{
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <TIMER0_Set_Initial_Normal_Mode+0x6>
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	9a 83       	std	Y+2, r25	; 0x02
     bf6:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=initial_value;
     bf8:	e2 e5       	ldi	r30, 0x52	; 82
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	80 83       	st	Z, r24
}
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <TIMER0_Stop>:
void TIMER0_Stop(void)
{
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
     c12:	e3 e5       	ldi	r30, 0x53	; 83
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	10 82       	st	Z, r1

}
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <TIMER1_Init_Normal_Mode>:

/////////////////delay2////////////////
void TIMER1_Init_Normal_Mode(void)
{
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0x00; // normal mode
     c26:	ef e4       	ldi	r30, 0x4F	; 79
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	10 82       	st	Z, r1
	TCCR1B = 0x00; // normal mode
     c2c:	ee e4       	ldi	r30, 0x4E	; 78
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	10 82       	st	Z, r1
}
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	08 95       	ret

00000c38 <TIMER1_Enable_Interrupt_Normal_Mode>:
void TIMER1_Enable_Interrupt_Normal_Mode(void)
{
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
	SREG|=(1<<7);
     c40:	af e5       	ldi	r26, 0x5F	; 95
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	ef e5       	ldi	r30, 0x5F	; 95
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	80 68       	ori	r24, 0x80	; 128
     c4c:	8c 93       	st	X, r24
	TIMSK |= (1<<TOIE1);
     c4e:	a9 e5       	ldi	r26, 0x59	; 89
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	e9 e5       	ldi	r30, 0x59	; 89
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	84 60       	ori	r24, 0x04	; 4
     c5a:	8c 93       	st	X, r24
}
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <TIMER1_Set_Normal_Mode>:
void TIMER1_Set_Normal_Mode(void)
{
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
	//prescaling 256
	TCCR1B |= (1<<CS12);
     c6a:	ae e4       	ldi	r26, 0x4E	; 78
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	ee e4       	ldi	r30, 0x4E	; 78
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	84 60       	ori	r24, 0x04	; 4
     c76:	8c 93       	st	X, r24
	TCCR1B = ~(1<<CS10) & ~(1<<CS11);
     c78:	ee e4       	ldi	r30, 0x4E	; 78
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	8c ef       	ldi	r24, 0xFC	; 252
     c7e:	80 83       	st	Z, r24
}
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <TIMER1_Set_Initial_Normal_Mode>:
void TIMER1_Set_Initial_Normal_Mode(int initial_value)
{
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <TIMER1_Set_Initial_Normal_Mode+0x6>
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	9a 83       	std	Y+2, r25	; 0x02
     c92:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = initial_value;
     c94:	ec e4       	ldi	r30, 0x4C	; 76
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	80 83       	st	Z, r24
}
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <TIMER1_OVF>:
void TIMER1_OVF(void)
{
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
	TIFR |=(1<<TOV1);
     cb2:	a8 e5       	ldi	r26, 0x58	; 88
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e8 e5       	ldi	r30, 0x58	; 88
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	84 60       	ori	r24, 0x04	; 4
     cbe:	8c 93       	st	X, r24
}
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <TIMER1_Stop>:
void TIMER1_Stop(void)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0;
     cce:	ee e4       	ldi	r30, 0x4E	; 78
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	10 82       	st	Z, r1

}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <delay1>:
void delay1(void)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	//set the timer
	TIMER0_Init_Normal_Mode();
     ce2:	0e 94 c4 05 	call	0xb88	; 0xb88 <TIMER0_Init_Normal_Mode>
//enable the timer interrupt
	TIMER0_Enable_Interrupt_Normal_Mode();
     ce6:	0e 94 d5 05 	call	0xbaa	; 0xbaa <TIMER0_Enable_Interrupt_Normal_Mode>
//set the prescaler
	TIMER0_Set_Normal_Mode();
     cea:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <TIMER0_Set_Normal_Mode>
//set initial value
	TIMER0_Set_Initial_Normal_Mode(11);
     cee:	8b e0       	ldi	r24, 0x0B	; 11
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 f5 05 	call	0xbea	; 0xbea <TIMER0_Set_Initial_Normal_Mode>
	//wait until overflow happens then we clear it
	while(interrupt_flag !=1);
     cf6:	80 91 6a 00 	lds	r24, 0x006A
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	e1 f7       	brne	.-8      	; 0xcf6 <delay1+0x1c>
	interrupt_flag=0;
     cfe:	10 92 6a 00 	sts	0x006A, r1
	//stop the timer by re initialize the TCCR0
	TIMER0_Stop();
     d02:	0e 94 05 06 	call	0xc0a	; 0xc0a <TIMER0_Stop>

}
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <delay2>:
 *delay for 5 seconds using timer1
 *
 */

void delay2(void)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
	//set the timer
	TIMER1_Init_Normal_Mode();
     d14:	0e 94 0f 06 	call	0xc1e	; 0xc1e <TIMER1_Init_Normal_Mode>
	//enable the timer interrupt
	TIMER1_Enable_Interrupt_Normal_Mode();
     d18:	0e 94 1c 06 	call	0xc38	; 0xc38 <TIMER1_Enable_Interrupt_Normal_Mode>
	//set the prescaler
	TIMER1_Set_Normal_Mode();
     d1c:	0e 94 31 06 	call	0xc62	; 0xc62 <TIMER1_Set_Normal_Mode>
	//set initial value
	TIMER1_Set_Initial_Normal_Mode(46004);
     d20:	84 eb       	ldi	r24, 0xB4	; 180
     d22:	93 eb       	ldi	r25, 0xB3	; 179
     d24:	0e 94 43 06 	call	0xc86	; 0xc86 <TIMER1_Set_Initial_Normal_Mode>
	while((TIFR & (1<<TOV1))==0);
     d28:	e8 e5       	ldi	r30, 0x58	; 88
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	88 2f       	mov	r24, r24
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	84 70       	andi	r24, 0x04	; 4
     d34:	90 70       	andi	r25, 0x00	; 0
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	b9 f3       	breq	.-18     	; 0xd28 <delay2+0x1c>
	TIMER1_OVF();
     d3a:	0e 94 55 06 	call	0xcaa	; 0xcaa <TIMER1_OVF>
	TIMER1_Stop();
     d3e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <TIMER1_Stop>
}
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <yellow_led_pedestrians>:
//toggle both leds for 5 seconds
void yellow_led_pedestrians(void)
{
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	2e 97       	sbiw	r28, 0x0e	; 14
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
	TIMER1_Init_Normal_Mode();
     d5c:	0e 94 0f 06 	call	0xc1e	; 0xc1e <TIMER1_Init_Normal_Mode>
	TIMER1_Enable_Interrupt_Normal_Mode();
     d60:	0e 94 1c 06 	call	0xc38	; 0xc38 <TIMER1_Enable_Interrupt_Normal_Mode>
	TIMER1_Set_Normal_Mode();
     d64:	0e 94 31 06 	call	0xc62	; 0xc62 <TIMER1_Set_Normal_Mode>
	TIMER1_Set_Initial_Normal_Mode(46004);
     d68:	84 eb       	ldi	r24, 0xB4	; 180
     d6a:	93 eb       	ldi	r25, 0xB3	; 179
     d6c:	0e 94 43 06 	call	0xc86	; 0xc86 <TIMER1_Set_Initial_Normal_Mode>
     d70:	7a c0       	rjmp	.+244    	; 0xe66 <yellow_led_pedestrians+0x11e>
	while((TIFR & (1<<TOV1))==0)
	{
		LED_toggle(Port_A,Pin_1);
     d72:	81 e4       	ldi	r24, 0x41	; 65
     d74:	61 e0       	ldi	r22, 0x01	; 1
     d76:	0e 94 01 0b 	call	0x1602	; 0x1602 <LED_toggle>
		LED_toggle(Port_B,Pin_1);
     d7a:	82 e4       	ldi	r24, 0x42	; 66
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	0e 94 01 0b 	call	0x1602	; 0x1602 <LED_toggle>
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	a8 e4       	ldi	r26, 0x48	; 72
     d88:	b2 e4       	ldi	r27, 0x42	; 66
     d8a:	8b 87       	std	Y+11, r24	; 0x0b
     d8c:	9c 87       	std	Y+12, r25	; 0x0c
     d8e:	ad 87       	std	Y+13, r26	; 0x0d
     d90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d92:	6b 85       	ldd	r22, Y+11	; 0x0b
     d94:	7c 85       	ldd	r23, Y+12	; 0x0c
     d96:	8d 85       	ldd	r24, Y+13	; 0x0d
     d98:	9e 85       	ldd	r25, Y+14	; 0x0e
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	4a e7       	ldi	r20, 0x7A	; 122
     da0:	53 e4       	ldi	r21, 0x43	; 67
     da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	8f 83       	std	Y+7, r24	; 0x07
     dac:	98 87       	std	Y+8, r25	; 0x08
     dae:	a9 87       	std	Y+9, r26	; 0x09
     db0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     db2:	6f 81       	ldd	r22, Y+7	; 0x07
     db4:	78 85       	ldd	r23, Y+8	; 0x08
     db6:	89 85       	ldd	r24, Y+9	; 0x09
     db8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e8       	ldi	r20, 0x80	; 128
     dc0:	5f e3       	ldi	r21, 0x3F	; 63
     dc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dc6:	88 23       	and	r24, r24
     dc8:	2c f4       	brge	.+10     	; 0xdd4 <yellow_led_pedestrians+0x8c>
		__ticks = 1;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	9e 83       	std	Y+6, r25	; 0x06
     dd0:	8d 83       	std	Y+5, r24	; 0x05
     dd2:	3f c0       	rjmp	.+126    	; 0xe52 <yellow_led_pedestrians+0x10a>
	else if (__tmp > 65535)
     dd4:	6f 81       	ldd	r22, Y+7	; 0x07
     dd6:	78 85       	ldd	r23, Y+8	; 0x08
     dd8:	89 85       	ldd	r24, Y+9	; 0x09
     dda:	9a 85       	ldd	r25, Y+10	; 0x0a
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	3f ef       	ldi	r19, 0xFF	; 255
     de0:	4f e7       	ldi	r20, 0x7F	; 127
     de2:	57 e4       	ldi	r21, 0x47	; 71
     de4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     de8:	18 16       	cp	r1, r24
     dea:	4c f5       	brge	.+82     	; 0xe3e <yellow_led_pedestrians+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dec:	6b 85       	ldd	r22, Y+11	; 0x0b
     dee:	7c 85       	ldd	r23, Y+12	; 0x0c
     df0:	8d 85       	ldd	r24, Y+13	; 0x0d
     df2:	9e 85       	ldd	r25, Y+14	; 0x0e
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	40 e2       	ldi	r20, 0x20	; 32
     dfa:	51 e4       	ldi	r21, 0x41	; 65
     dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e00:	dc 01       	movw	r26, r24
     e02:	cb 01       	movw	r24, r22
     e04:	bc 01       	movw	r22, r24
     e06:	cd 01       	movw	r24, r26
     e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
     e14:	0f c0       	rjmp	.+30     	; 0xe34 <yellow_led_pedestrians+0xec>
     e16:	89 e1       	ldi	r24, 0x19	; 25
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	9c 83       	std	Y+4, r25	; 0x04
     e1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	f1 f7       	brne	.-4      	; 0xe22 <yellow_led_pedestrians+0xda>
     e26:	9c 83       	std	Y+4, r25	; 0x04
     e28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e2a:	8d 81       	ldd	r24, Y+5	; 0x05
     e2c:	9e 81       	ldd	r25, Y+6	; 0x06
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	9e 83       	std	Y+6, r25	; 0x06
     e32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e34:	8d 81       	ldd	r24, Y+5	; 0x05
     e36:	9e 81       	ldd	r25, Y+6	; 0x06
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	69 f7       	brne	.-38     	; 0xe16 <yellow_led_pedestrians+0xce>
     e3c:	14 c0       	rjmp	.+40     	; 0xe66 <yellow_led_pedestrians+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e3e:	6f 81       	ldd	r22, Y+7	; 0x07
     e40:	78 85       	ldd	r23, Y+8	; 0x08
     e42:	89 85       	ldd	r24, Y+9	; 0x09
     e44:	9a 85       	ldd	r25, Y+10	; 0x0a
     e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	9e 83       	std	Y+6, r25	; 0x06
     e50:	8d 83       	std	Y+5, r24	; 0x05
     e52:	8d 81       	ldd	r24, Y+5	; 0x05
     e54:	9e 81       	ldd	r25, Y+6	; 0x06
     e56:	9a 83       	std	Y+2, r25	; 0x02
     e58:	89 83       	std	Y+1, r24	; 0x01
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	9a 81       	ldd	r25, Y+2	; 0x02
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	f1 f7       	brne	.-4      	; 0xe5e <yellow_led_pedestrians+0x116>
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	89 83       	std	Y+1, r24	; 0x01
{
	TIMER1_Init_Normal_Mode();
	TIMER1_Enable_Interrupt_Normal_Mode();
	TIMER1_Set_Normal_Mode();
	TIMER1_Set_Initial_Normal_Mode(46004);
	while((TIFR & (1<<TOV1))==0)
     e66:	e8 e5       	ldi	r30, 0x58	; 88
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	84 70       	andi	r24, 0x04	; 4
     e72:	90 70       	andi	r25, 0x00	; 0
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	09 f4       	brne	.+2      	; 0xe7a <yellow_led_pedestrians+0x132>
     e78:	7c cf       	rjmp	.-264    	; 0xd72 <yellow_led_pedestrians+0x2a>
	{
		LED_toggle(Port_A,Pin_1);
		LED_toggle(Port_B,Pin_1);
		_delay_ms(50);
	}
	LED_OFF(Port_A,Pin_1);
     e7a:	81 e4       	ldi	r24, 0x41	; 65
     e7c:	61 e0       	ldi	r22, 0x01	; 1
     e7e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
	LED_OFF(Port_B,Pin_1);
     e82:	82 e4       	ldi	r24, 0x42	; 66
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
	TIMER1_OVF();
     e8a:	0e 94 55 06 	call	0xcaa	; 0xcaa <TIMER1_OVF>
	TIMER1_Stop();
     e8e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <TIMER1_Stop>
}
     e92:	2e 96       	adiw	r28, 0x0e	; 14
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <yellow_led_cars_toggle>:
/*
 * this function is used to toggle both yellow leds for 5 seconds
 *  and make a delay a 0.5 second between the toggle and another
 */
void yellow_led_cars_toggle(void)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <yellow_led_cars_toggle+0x6>
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
	uint8_t count=0;
     eae:	1a 82       	std	Y+2, r1	; 0x02
	for(uint8_t i=0;i<10;i++)
     eb0:	19 82       	std	Y+1, r1	; 0x01
     eb2:	24 c0       	rjmp	.+72     	; 0xefc <yellow_led_cars_toggle+0x58>
	{

		for(count = 0; count < 2; count++)
     eb4:	1a 82       	std	Y+2, r1	; 0x02
     eb6:	10 c0       	rjmp	.+32     	; 0xed8 <yellow_led_cars_toggle+0x34>
		{
			LED_toggle(Port_A,Pin_1);
     eb8:	81 e4       	ldi	r24, 0x41	; 65
     eba:	61 e0       	ldi	r22, 0x01	; 1
     ebc:	0e 94 01 0b 	call	0x1602	; 0x1602 <LED_toggle>
			//LED_toggle(Port_B,Pin_1);
			Button_read(Port_A,Pin_1,&Yellow_state);
     ec0:	2d e6       	ldi	r18, 0x6D	; 109
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	81 e4       	ldi	r24, 0x41	; 65
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	a9 01       	movw	r20, r18
     eca:	0e 94 22 0b 	call	0x1644	; 0x1644 <Button_read>
			Timer2_Delay(); //it's an alternative to the _delay_ms
     ece:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer2_Delay>
{
	uint8_t count=0;
	for(uint8_t i=0;i<10;i++)
	{

		for(count = 0; count < 2; count++)
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	8a 83       	std	Y+2, r24	; 0x02
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	68 f3       	brcs	.-38     	; 0xeb8 <yellow_led_cars_toggle+0x14>
			LED_toggle(Port_A,Pin_1);
			//LED_toggle(Port_B,Pin_1);
			Button_read(Port_A,Pin_1,&Yellow_state);
			Timer2_Delay(); //it's an alternative to the _delay_ms
		}
		count=0;
     ede:	1a 82       	std	Y+2, r1	; 0x02
		//i=0;
		LED_OFF(Port_A,Pin_1);
     ee0:	81 e4       	ldi	r24, 0x41	; 65
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		Button_read(Port_A,Pin_1,&Yellow_state);
     ee8:	2d e6       	ldi	r18, 0x6D	; 109
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e4       	ldi	r24, 0x41	; 65
     eee:	61 e0       	ldi	r22, 0x01	; 1
     ef0:	a9 01       	movw	r20, r18
     ef2:	0e 94 22 0b 	call	0x1644	; 0x1644 <Button_read>
 *  and make a delay a 0.5 second between the toggle and another
 */
void yellow_led_cars_toggle(void)
{
	uint8_t count=0;
	for(uint8_t i=0;i<10;i++)
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	8f 5f       	subi	r24, 0xFF	; 255
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	8a 30       	cpi	r24, 0x0A	; 10
     f00:	c8 f2       	brcs	.-78     	; 0xeb4 <yellow_led_cars_toggle+0x10>
		count=0;
		//i=0;
		LED_OFF(Port_A,Pin_1);
		Button_read(Port_A,Pin_1,&Yellow_state);
	}
}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <__vector_11>:
ISR(TIMER0_OVF_vect)
{
     f0c:	1f 92       	push	r1
     f0e:	0f 92       	push	r0
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	0f 92       	push	r0
     f14:	11 24       	eor	r1, r1
     f16:	8f 93       	push	r24
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
	ovf++;
     f20:	80 91 6b 00 	lds	r24, 0x006B
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	80 93 6b 00 	sts	0x006B, r24
	if(ovf == NUMBR_OF_TICKS_PER_FIVE_SECONDS)
     f2a:	80 91 6b 00 	lds	r24, 0x006B
     f2e:	84 31       	cpi	r24, 0x14	; 20
     f30:	29 f4       	brne	.+10     	; 0xf3c <__vector_11+0x30>
	{
		interrupt_flag=1; // when numbers of flows happens we will set this global flag to tell the timer to stop
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	80 93 6a 00 	sts	0x006A, r24
		ovf=0;
     f38:	10 92 6b 00 	sts	0x006B, r1
	}

}
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	8f 91       	pop	r24
     f42:	0f 90       	pop	r0
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	0f 90       	pop	r0
     f48:	1f 90       	pop	r1
     f4a:	18 95       	reti

00000f4c <Dio_init>:
 *      Author: Nada Karam
 */
#include "Dio.h"

void Dio_init(uint8_t PortNumber,uint8_t PinNumber,uint8_t Direction)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	27 97       	sbiw	r28, 0x07	; 7
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	6a 83       	std	Y+2, r22	; 0x02
     f64:	4b 83       	std	Y+3, r20	; 0x03

	if(Direction == IN)
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	88 23       	and	r24, r24
     f6a:	09 f0       	breq	.+2      	; 0xf6e <Dio_init+0x22>
     f6c:	75 c0       	rjmp	.+234    	; 0x1058 <Dio_init+0x10c>
	{
		switch(PortNumber)
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	3f 83       	std	Y+7, r19	; 0x07
     f76:	2e 83       	std	Y+6, r18	; 0x06
     f78:	8e 81       	ldd	r24, Y+6	; 0x06
     f7a:	9f 81       	ldd	r25, Y+7	; 0x07
     f7c:	82 34       	cpi	r24, 0x42	; 66
     f7e:	91 05       	cpc	r25, r1
     f80:	61 f1       	breq	.+88     	; 0xfda <Dio_init+0x8e>
     f82:	2e 81       	ldd	r18, Y+6	; 0x06
     f84:	3f 81       	ldd	r19, Y+7	; 0x07
     f86:	23 34       	cpi	r18, 0x43	; 67
     f88:	31 05       	cpc	r19, r1
     f8a:	34 f4       	brge	.+12     	; 0xf98 <Dio_init+0x4c>
     f8c:	8e 81       	ldd	r24, Y+6	; 0x06
     f8e:	9f 81       	ldd	r25, Y+7	; 0x07
     f90:	81 34       	cpi	r24, 0x41	; 65
     f92:	91 05       	cpc	r25, r1
     f94:	69 f0       	breq	.+26     	; 0xfb0 <Dio_init+0x64>
     f96:	d3 c0       	rjmp	.+422    	; 0x113e <Dio_init+0x1f2>
     f98:	2e 81       	ldd	r18, Y+6	; 0x06
     f9a:	3f 81       	ldd	r19, Y+7	; 0x07
     f9c:	23 34       	cpi	r18, 0x43	; 67
     f9e:	31 05       	cpc	r19, r1
     fa0:	89 f1       	breq	.+98     	; 0x1004 <Dio_init+0xb8>
     fa2:	8e 81       	ldd	r24, Y+6	; 0x06
     fa4:	9f 81       	ldd	r25, Y+7	; 0x07
     fa6:	84 34       	cpi	r24, 0x44	; 68
     fa8:	91 05       	cpc	r25, r1
     faa:	09 f4       	brne	.+2      	; 0xfae <Dio_init+0x62>
     fac:	40 c0       	rjmp	.+128    	; 0x102e <Dio_init+0xe2>
     fae:	c7 c0       	rjmp	.+398    	; 0x113e <Dio_init+0x1f2>
		{
		case Port_A:
			DDRA &=~(1<<PinNumber);
     fb0:	aa e3       	ldi	r26, 0x3A	; 58
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	ea e3       	ldi	r30, 0x3A	; 58
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <Dio_init+0x82>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <Dio_init+0x7e>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	b2 c0       	rjmp	.+356    	; 0x113e <Dio_init+0x1f2>
			break;
		case Port_B:
			DDRB &=~(1<<PinNumber);
     fda:	a7 e3       	ldi	r26, 0x37	; 55
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e7 e3       	ldi	r30, 0x37	; 55
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <Dio_init+0xac>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <Dio_init+0xa8>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	9d c0       	rjmp	.+314    	; 0x113e <Dio_init+0x1f2>
			break;
		case Port_C:
			DDRC &=~(1<<PinNumber);
    1004:	a4 e3       	ldi	r26, 0x34	; 52
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e4 e3       	ldi	r30, 0x34	; 52
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <Dio_init+0xd6>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <Dio_init+0xd2>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	88 c0       	rjmp	.+272    	; 0x113e <Dio_init+0x1f2>
			break;
		case Port_D:
			DDRD &=~(1<<PinNumber);
    102e:	a1 e3       	ldi	r26, 0x31	; 49
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e1 e3       	ldi	r30, 0x31	; 49
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <Dio_init+0x100>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <Dio_init+0xfc>
    1050:	80 95       	com	r24
    1052:	84 23       	and	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	73 c0       	rjmp	.+230    	; 0x113e <Dio_init+0x1f2>
			break;
		}
	}
	else if(Direction == OUT)
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	09 f0       	breq	.+2      	; 0x1060 <Dio_init+0x114>
    105e:	6f c0       	rjmp	.+222    	; 0x113e <Dio_init+0x1f2>
	{
		switch(PortNumber)
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	3d 83       	std	Y+5, r19	; 0x05
    1068:	2c 83       	std	Y+4, r18	; 0x04
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	9d 81       	ldd	r25, Y+5	; 0x05
    106e:	82 34       	cpi	r24, 0x42	; 66
    1070:	91 05       	cpc	r25, r1
    1072:	51 f1       	breq	.+84     	; 0x10c8 <Dio_init+0x17c>
    1074:	2c 81       	ldd	r18, Y+4	; 0x04
    1076:	3d 81       	ldd	r19, Y+5	; 0x05
    1078:	23 34       	cpi	r18, 0x43	; 67
    107a:	31 05       	cpc	r19, r1
    107c:	34 f4       	brge	.+12     	; 0x108a <Dio_init+0x13e>
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	9d 81       	ldd	r25, Y+5	; 0x05
    1082:	81 34       	cpi	r24, 0x41	; 65
    1084:	91 05       	cpc	r25, r1
    1086:	61 f0       	breq	.+24     	; 0x10a0 <Dio_init+0x154>
    1088:	5a c0       	rjmp	.+180    	; 0x113e <Dio_init+0x1f2>
    108a:	2c 81       	ldd	r18, Y+4	; 0x04
    108c:	3d 81       	ldd	r19, Y+5	; 0x05
    108e:	23 34       	cpi	r18, 0x43	; 67
    1090:	31 05       	cpc	r19, r1
    1092:	71 f1       	breq	.+92     	; 0x10f0 <Dio_init+0x1a4>
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	9d 81       	ldd	r25, Y+5	; 0x05
    1098:	84 34       	cpi	r24, 0x44	; 68
    109a:	91 05       	cpc	r25, r1
    109c:	e9 f1       	breq	.+122    	; 0x1118 <Dio_init+0x1cc>
    109e:	4f c0       	rjmp	.+158    	; 0x113e <Dio_init+0x1f2>
		{
		case Port_A:
			DDRA |=(1<<PinNumber);
    10a0:	aa e3       	ldi	r26, 0x3A	; 58
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	ea e3       	ldi	r30, 0x3A	; 58
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <Dio_init+0x172>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <Dio_init+0x16e>
    10c2:	84 2b       	or	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	3b c0       	rjmp	.+118    	; 0x113e <Dio_init+0x1f2>
			break;
		case Port_B:
			DDRB |=(1<<PinNumber);
    10c8:	a7 e3       	ldi	r26, 0x37	; 55
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e7 e3       	ldi	r30, 0x37	; 55
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <Dio_init+0x19a>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <Dio_init+0x196>
    10ea:	84 2b       	or	r24, r20
    10ec:	8c 93       	st	X, r24
    10ee:	27 c0       	rjmp	.+78     	; 0x113e <Dio_init+0x1f2>
			break;
		case Port_C:
			DDRC |=(1<<PinNumber);
    10f0:	a4 e3       	ldi	r26, 0x34	; 52
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e4 e3       	ldi	r30, 0x34	; 52
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <Dio_init+0x1c2>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <Dio_init+0x1be>
    1112:	84 2b       	or	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	13 c0       	rjmp	.+38     	; 0x113e <Dio_init+0x1f2>
			break;
		case Port_D:
			DDRD |=(1<<PinNumber);
    1118:	a1 e3       	ldi	r26, 0x31	; 49
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e1 e3       	ldi	r30, 0x31	; 49
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <Dio_init+0x1ea>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <Dio_init+0x1e6>
    113a:	84 2b       	or	r24, r20
    113c:	8c 93       	st	X, r24
			break;
		}
	}
}
    113e:	27 96       	adiw	r28, 0x07	; 7
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <Dio_read>:
void Dio_read(uint8_t PortNumber,uint8_t PinNumber,uint8_t *value)
{
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <Dio_read+0x6>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <Dio_read+0x8>
    1158:	00 d0       	rcall	.+0      	; 0x115a <Dio_read+0xa>
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	6a 83       	std	Y+2, r22	; 0x02
    1162:	5c 83       	std	Y+4, r21	; 0x04
    1164:	4b 83       	std	Y+3, r20	; 0x03
	switch(PortNumber)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	3e 83       	std	Y+6, r19	; 0x06
    116e:	2d 83       	std	Y+5, r18	; 0x05
    1170:	4d 81       	ldd	r20, Y+5	; 0x05
    1172:	5e 81       	ldd	r21, Y+6	; 0x06
    1174:	42 34       	cpi	r20, 0x42	; 66
    1176:	51 05       	cpc	r21, r1
    1178:	c1 f1       	breq	.+112    	; 0x11ea <Dio_read+0x9a>
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	83 34       	cpi	r24, 0x43	; 67
    1180:	91 05       	cpc	r25, r1
    1182:	34 f4       	brge	.+12     	; 0x1190 <Dio_read+0x40>
    1184:	2d 81       	ldd	r18, Y+5	; 0x05
    1186:	3e 81       	ldd	r19, Y+6	; 0x06
    1188:	21 34       	cpi	r18, 0x41	; 65
    118a:	31 05       	cpc	r19, r1
    118c:	71 f0       	breq	.+28     	; 0x11aa <Dio_read+0x5a>
    118e:	8c c0       	rjmp	.+280    	; 0x12a8 <Dio_read+0x158>
    1190:	4d 81       	ldd	r20, Y+5	; 0x05
    1192:	5e 81       	ldd	r21, Y+6	; 0x06
    1194:	43 34       	cpi	r20, 0x43	; 67
    1196:	51 05       	cpc	r21, r1
    1198:	09 f4       	brne	.+2      	; 0x119c <Dio_read+0x4c>
    119a:	47 c0       	rjmp	.+142    	; 0x122a <Dio_read+0xda>
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	9e 81       	ldd	r25, Y+6	; 0x06
    11a0:	84 34       	cpi	r24, 0x44	; 68
    11a2:	91 05       	cpc	r25, r1
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <Dio_read+0x58>
    11a6:	61 c0       	rjmp	.+194    	; 0x126a <Dio_read+0x11a>
    11a8:	7f c0       	rjmp	.+254    	; 0x12a8 <Dio_read+0x158>
	{
	case Port_A:
		*value =(PINA & (1<<PinNumber))>>PinNumber;
    11aa:	e9 e3       	ldi	r30, 0x39	; 57
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <Dio_read+0x74>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	2a 95       	dec	r18
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <Dio_read+0x70>
    11c8:	9a 01       	movw	r18, r20
    11ca:	28 23       	and	r18, r24
    11cc:	39 23       	and	r19, r25
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	a9 01       	movw	r20, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <Dio_read+0x8c>
    11d8:	55 95       	asr	r21
    11da:	47 95       	ror	r20
    11dc:	8a 95       	dec	r24
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <Dio_read+0x88>
    11e0:	ca 01       	movw	r24, r20
    11e2:	eb 81       	ldd	r30, Y+3	; 0x03
    11e4:	fc 81       	ldd	r31, Y+4	; 0x04
    11e6:	80 83       	st	Z, r24
    11e8:	5f c0       	rjmp	.+190    	; 0x12a8 <Dio_read+0x158>
		break;
	case Port_B:
		*value =(PINB & (1<<PinNumber))>>PinNumber;
    11ea:	e6 e3       	ldi	r30, 0x36	; 54
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <Dio_read+0xb4>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	2a 95       	dec	r18
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <Dio_read+0xb0>
    1208:	9a 01       	movw	r18, r20
    120a:	28 23       	and	r18, r24
    120c:	39 23       	and	r19, r25
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	a9 01       	movw	r20, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <Dio_read+0xcc>
    1218:	55 95       	asr	r21
    121a:	47 95       	ror	r20
    121c:	8a 95       	dec	r24
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <Dio_read+0xc8>
    1220:	ca 01       	movw	r24, r20
    1222:	eb 81       	ldd	r30, Y+3	; 0x03
    1224:	fc 81       	ldd	r31, Y+4	; 0x04
    1226:	80 83       	st	Z, r24
    1228:	3f c0       	rjmp	.+126    	; 0x12a8 <Dio_read+0x158>
		break;
	case Port_C:
		*value =(PINC & (1<<PinNumber))>>PinNumber;
    122a:	e3 e3       	ldi	r30, 0x33	; 51
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <Dio_read+0xf4>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	2a 95       	dec	r18
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <Dio_read+0xf0>
    1248:	9a 01       	movw	r18, r20
    124a:	28 23       	and	r18, r24
    124c:	39 23       	and	r19, r25
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	a9 01       	movw	r20, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <Dio_read+0x10c>
    1258:	55 95       	asr	r21
    125a:	47 95       	ror	r20
    125c:	8a 95       	dec	r24
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <Dio_read+0x108>
    1260:	ca 01       	movw	r24, r20
    1262:	eb 81       	ldd	r30, Y+3	; 0x03
    1264:	fc 81       	ldd	r31, Y+4	; 0x04
    1266:	80 83       	st	Z, r24
    1268:	1f c0       	rjmp	.+62     	; 0x12a8 <Dio_read+0x158>
		break;
	case Port_D:
		*value =(PIND & (1<<PinNumber))>>PinNumber;
    126a:	e0 e3       	ldi	r30, 0x30	; 48
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	48 2f       	mov	r20, r24
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <Dio_read+0x134>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	2a 95       	dec	r18
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <Dio_read+0x130>
    1288:	9a 01       	movw	r18, r20
    128a:	28 23       	and	r18, r24
    128c:	39 23       	and	r19, r25
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	a9 01       	movw	r20, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <Dio_read+0x14c>
    1298:	55 95       	asr	r21
    129a:	47 95       	ror	r20
    129c:	8a 95       	dec	r24
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <Dio_read+0x148>
    12a0:	ca 01       	movw	r24, r20
    12a2:	eb 81       	ldd	r30, Y+3	; 0x03
    12a4:	fc 81       	ldd	r31, Y+4	; 0x04
    12a6:	80 83       	st	Z, r24
		break;
	}
	//	return *value;
}
    12a8:	26 96       	adiw	r28, 0x06	; 6
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <Dio_write>:
void Dio_write(uint8_t PortNumber,uint8_t PinNumber, uint8_t value)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <Dio_write+0x6>
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <Dio_write+0x8>
    12c2:	0f 92       	push	r0
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	6a 83       	std	Y+2, r22	; 0x02
    12cc:	4b 83       	std	Y+3, r20	; 0x03
	switch(PortNumber)
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	3d 83       	std	Y+5, r19	; 0x05
    12d6:	2c 83       	std	Y+4, r18	; 0x04
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	9d 81       	ldd	r25, Y+5	; 0x05
    12dc:	82 34       	cpi	r24, 0x42	; 66
    12de:	91 05       	cpc	r25, r1
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <Dio_write+0x2a>
    12e2:	48 c0       	rjmp	.+144    	; 0x1374 <Dio_write+0xba>
    12e4:	2c 81       	ldd	r18, Y+4	; 0x04
    12e6:	3d 81       	ldd	r19, Y+5	; 0x05
    12e8:	23 34       	cpi	r18, 0x43	; 67
    12ea:	31 05       	cpc	r19, r1
    12ec:	34 f4       	brge	.+12     	; 0x12fa <Dio_write+0x40>
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	9d 81       	ldd	r25, Y+5	; 0x05
    12f2:	81 34       	cpi	r24, 0x41	; 65
    12f4:	91 05       	cpc	r25, r1
    12f6:	71 f0       	breq	.+28     	; 0x1314 <Dio_write+0x5a>
    12f8:	cb c0       	rjmp	.+406    	; 0x1490 <Dio_write+0x1d6>
    12fa:	2c 81       	ldd	r18, Y+4	; 0x04
    12fc:	3d 81       	ldd	r19, Y+5	; 0x05
    12fe:	23 34       	cpi	r18, 0x43	; 67
    1300:	31 05       	cpc	r19, r1
    1302:	09 f4       	brne	.+2      	; 0x1306 <Dio_write+0x4c>
    1304:	67 c0       	rjmp	.+206    	; 0x13d4 <Dio_write+0x11a>
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	84 34       	cpi	r24, 0x44	; 68
    130c:	91 05       	cpc	r25, r1
    130e:	09 f4       	brne	.+2      	; 0x1312 <Dio_write+0x58>
    1310:	91 c0       	rjmp	.+290    	; 0x1434 <Dio_write+0x17a>
    1312:	be c0       	rjmp	.+380    	; 0x1490 <Dio_write+0x1d6>
	{
	case Port_A:
		if(value == HIGH)
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	a1 f4       	brne	.+40     	; 0x1342 <Dio_write+0x88>
			PORTA |=(1<<PinNumber);
    131a:	ab e3       	ldi	r26, 0x3B	; 59
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	eb e3       	ldi	r30, 0x3B	; 59
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <Dio_write+0x7e>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <Dio_write+0x7a>
    133c:	84 2b       	or	r24, r20
    133e:	8c 93       	st	X, r24
    1340:	a7 c0       	rjmp	.+334    	; 0x1490 <Dio_write+0x1d6>
		else if(value == LOW)
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	88 23       	and	r24, r24
    1346:	09 f0       	breq	.+2      	; 0x134a <Dio_write+0x90>
    1348:	a3 c0       	rjmp	.+326    	; 0x1490 <Dio_write+0x1d6>
			PORTA &=~(1<<PinNumber);
    134a:	ab e3       	ldi	r26, 0x3B	; 59
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	eb e3       	ldi	r30, 0x3B	; 59
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <Dio_write+0xae>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <Dio_write+0xaa>
    136c:	80 95       	com	r24
    136e:	84 23       	and	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	8e c0       	rjmp	.+284    	; 0x1490 <Dio_write+0x1d6>
		break;
	case Port_B:
		if(value == HIGH)
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	a1 f4       	brne	.+40     	; 0x13a2 <Dio_write+0xe8>
			PORTB |=(1<<PinNumber);
    137a:	a8 e3       	ldi	r26, 0x38	; 56
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e8 e3       	ldi	r30, 0x38	; 56
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <Dio_write+0xde>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <Dio_write+0xda>
    139c:	84 2b       	or	r24, r20
    139e:	8c 93       	st	X, r24
    13a0:	77 c0       	rjmp	.+238    	; 0x1490 <Dio_write+0x1d6>
		else if(value== LOW)
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	88 23       	and	r24, r24
    13a6:	09 f0       	breq	.+2      	; 0x13aa <Dio_write+0xf0>
    13a8:	73 c0       	rjmp	.+230    	; 0x1490 <Dio_write+0x1d6>
			PORTB &=~(1<<PinNumber);
    13aa:	a8 e3       	ldi	r26, 0x38	; 56
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e8 e3       	ldi	r30, 0x38	; 56
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <Dio_write+0x10e>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <Dio_write+0x10a>
    13cc:	80 95       	com	r24
    13ce:	84 23       	and	r24, r20
    13d0:	8c 93       	st	X, r24
    13d2:	5e c0       	rjmp	.+188    	; 0x1490 <Dio_write+0x1d6>
		break;
	case Port_C:
		if(value == HIGH)
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	a1 f4       	brne	.+40     	; 0x1402 <Dio_write+0x148>
			PORTC |=(1<<PinNumber);
    13da:	a5 e3       	ldi	r26, 0x35	; 53
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e5 e3       	ldi	r30, 0x35	; 53
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <Dio_write+0x13e>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <Dio_write+0x13a>
    13fc:	84 2b       	or	r24, r20
    13fe:	8c 93       	st	X, r24
    1400:	47 c0       	rjmp	.+142    	; 0x1490 <Dio_write+0x1d6>
		else if(value== LOW)
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	88 23       	and	r24, r24
    1406:	09 f0       	breq	.+2      	; 0x140a <Dio_write+0x150>
    1408:	43 c0       	rjmp	.+134    	; 0x1490 <Dio_write+0x1d6>
			PORTC &=~(1<<PinNumber);
    140a:	a5 e3       	ldi	r26, 0x35	; 53
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e5 e3       	ldi	r30, 0x35	; 53
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <Dio_write+0x16e>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <Dio_write+0x16a>
    142c:	80 95       	com	r24
    142e:	84 23       	and	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	2e c0       	rjmp	.+92     	; 0x1490 <Dio_write+0x1d6>
		break;
	case Port_D:
		if(value == HIGH)
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	a1 f4       	brne	.+40     	; 0x1462 <Dio_write+0x1a8>
			PORTD |=(1<<PinNumber);
    143a:	a2 e3       	ldi	r26, 0x32	; 50
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e2 e3       	ldi	r30, 0x32	; 50
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <Dio_write+0x19e>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <Dio_write+0x19a>
    145c:	84 2b       	or	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	17 c0       	rjmp	.+46     	; 0x1490 <Dio_write+0x1d6>
		else if(value == LOW)
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	88 23       	and	r24, r24
    1466:	a1 f4       	brne	.+40     	; 0x1490 <Dio_write+0x1d6>
			PORTD &=~(1<<PinNumber);
    1468:	a2 e3       	ldi	r26, 0x32	; 50
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e2 e3       	ldi	r30, 0x32	; 50
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <Dio_write+0x1cc>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <Dio_write+0x1c8>
    148a:	80 95       	com	r24
    148c:	84 23       	and	r24, r20
    148e:	8c 93       	st	X, r24
		break;
	}

}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <Dio_toggle>:
void Dio_toggle(uint8_t PortNumber,uint8_t PinNumber)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <Dio_toggle+0x6>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <Dio_toggle+0x8>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortNumber)
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3c 83       	std	Y+4, r19	; 0x04
    14b8:	2b 83       	std	Y+3, r18	; 0x03
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	82 34       	cpi	r24, 0x42	; 66
    14c0:	91 05       	cpc	r25, r1
    14c2:	51 f1       	breq	.+84     	; 0x1518 <Dio_toggle+0x78>
    14c4:	2b 81       	ldd	r18, Y+3	; 0x03
    14c6:	3c 81       	ldd	r19, Y+4	; 0x04
    14c8:	23 34       	cpi	r18, 0x43	; 67
    14ca:	31 05       	cpc	r19, r1
    14cc:	34 f4       	brge	.+12     	; 0x14da <Dio_toggle+0x3a>
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	81 34       	cpi	r24, 0x41	; 65
    14d4:	91 05       	cpc	r25, r1
    14d6:	61 f0       	breq	.+24     	; 0x14f0 <Dio_toggle+0x50>
    14d8:	5a c0       	rjmp	.+180    	; 0x158e <Dio_toggle+0xee>
    14da:	2b 81       	ldd	r18, Y+3	; 0x03
    14dc:	3c 81       	ldd	r19, Y+4	; 0x04
    14de:	23 34       	cpi	r18, 0x43	; 67
    14e0:	31 05       	cpc	r19, r1
    14e2:	71 f1       	breq	.+92     	; 0x1540 <Dio_toggle+0xa0>
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	84 34       	cpi	r24, 0x44	; 68
    14ea:	91 05       	cpc	r25, r1
    14ec:	e9 f1       	breq	.+122    	; 0x1568 <Dio_toggle+0xc8>
    14ee:	4f c0       	rjmp	.+158    	; 0x158e <Dio_toggle+0xee>
	{
	case Port_A:
		PORTA ^=(1<<PinNumber);
    14f0:	ab e3       	ldi	r26, 0x3B	; 59
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	eb e3       	ldi	r30, 0x3B	; 59
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <Dio_toggle+0x6e>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <Dio_toggle+0x6a>
    1512:	84 27       	eor	r24, r20
    1514:	8c 93       	st	X, r24
    1516:	3b c0       	rjmp	.+118    	; 0x158e <Dio_toggle+0xee>
		break;
	case Port_B:
		PORTB ^=(1<<PinNumber);
    1518:	a8 e3       	ldi	r26, 0x38	; 56
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e8 e3       	ldi	r30, 0x38	; 56
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 2e       	mov	r0, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <Dio_toggle+0x96>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <Dio_toggle+0x92>
    153a:	84 27       	eor	r24, r20
    153c:	8c 93       	st	X, r24
    153e:	27 c0       	rjmp	.+78     	; 0x158e <Dio_toggle+0xee>
		break;
	case Port_C:
		PORTC ^=(1<<PinNumber);
    1540:	a5 e3       	ldi	r26, 0x35	; 53
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e5 e3       	ldi	r30, 0x35	; 53
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <Dio_toggle+0xbe>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <Dio_toggle+0xba>
    1562:	84 27       	eor	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	13 c0       	rjmp	.+38     	; 0x158e <Dio_toggle+0xee>
		break;
	case Port_D:
		PORTD ^=(1<<PinNumber);
    1568:	a2 e3       	ldi	r26, 0x32	; 50
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e2 e3       	ldi	r30, 0x32	; 50
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <Dio_toggle+0xe6>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <Dio_toggle+0xe2>
    158a:	84 27       	eor	r24, r20
    158c:	8c 93       	st	X, r24
		break;
	}

}
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <LED_init>:
//#include"Timer.h"
//uint8_t tick=0;
uint8_t gb_flag=LOW;
//initialize the led
void LED_init(uint8_t PortNumber,uint8_t PinNumber)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <LED_init+0x6>
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	6a 83       	std	Y+2, r22	; 0x02
	Dio_init(PortNumber,PinNumber,OUT);
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	6a 81       	ldd	r22, Y+2	; 0x02
    15ae:	41 e0       	ldi	r20, 0x01	; 1
    15b0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <Dio_init>

}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <LED_ON>:
void LED_ON(uint8_t PortNumber,uint8_t PinNumber)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <LED_ON+0x6>
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	6a 83       	std	Y+2, r22	; 0x02
	Dio_write(PortNumber,PinNumber,HIGH);
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	6a 81       	ldd	r22, Y+2	; 0x02
    15d0:	41 e0       	ldi	r20, 0x01	; 1
    15d2:	0e 94 5d 09 	call	0x12ba	; 0x12ba <Dio_write>
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <LED_OFF>:
void LED_OFF(uint8_t PortNumber,uint8_t PinNumber)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <LED_OFF+0x6>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	6a 83       	std	Y+2, r22	; 0x02
	Dio_write(PortNumber,PinNumber,LOW);
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	6a 81       	ldd	r22, Y+2	; 0x02
    15f2:	40 e0       	ldi	r20, 0x00	; 0
    15f4:	0e 94 5d 09 	call	0x12ba	; 0x12ba <Dio_write>
}
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <LED_toggle>:
void LED_toggle(uint8_t PortNumber, uint8_t PinNumber)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <LED_toggle+0x6>
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	6a 83       	std	Y+2, r22	; 0x02
	Dio_toggle(PortNumber,PinNumber);
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	6a 81       	ldd	r22, Y+2	; 0x02
    1614:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <Dio_toggle>
}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <Button_init>:
#ifndef BUTTON_BUTTON_C_
#define BUTTON_BUTTON_C_
#include "Button.h"

void Button_init(uint8_t PortNumber,uint8_t PinNumber)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	00 d0       	rcall	.+0      	; 0x1628 <Button_init+0x6>
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	6a 83       	std	Y+2, r22	; 0x02
	Dio_init(PortNumber,PinNumber,IN);
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	6a 81       	ldd	r22, Y+2	; 0x02
    1634:	40 e0       	ldi	r20, 0x00	; 0
    1636:	0e 94 a6 07 	call	0xf4c	; 0xf4c <Dio_init>
}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <Button_read>:
void Button_read(uint8_t PortNumber,uint8_t PinNumber,uint8_t *value)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <Button_read+0x6>
    164a:	00 d0       	rcall	.+0      	; 0x164c <Button_read+0x8>
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	6a 83       	std	Y+2, r22	; 0x02
    1654:	5c 83       	std	Y+4, r21	; 0x04
    1656:	4b 83       	std	Y+3, r20	; 0x03
  Dio_read(PortNumber,PinNumber,value);
    1658:	2b 81       	ldd	r18, Y+3	; 0x03
    165a:	3c 81       	ldd	r19, Y+4	; 0x04
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	6a 81       	ldd	r22, Y+2	; 0x02
    1660:	a9 01       	movw	r20, r18
    1662:	0e 94 a8 08 	call	0x1150	; 0x1150 <Dio_read>
}
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <Button_write>:
void Button_write(uint8_t PortNumber,uint8_t PinNumber,uint8_t value)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <Button_write+0x6>
    167a:	0f 92       	push	r0
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	6a 83       	std	Y+2, r22	; 0x02
    1684:	4b 83       	std	Y+3, r20	; 0x03
	Dio_write(PortNumber,PinNumber,value);
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	6a 81       	ldd	r22, Y+2	; 0x02
    168a:	4b 81       	ldd	r20, Y+3	; 0x03
    168c:	0e 94 5d 09 	call	0x12ba	; 0x12ba <Dio_write>
}
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <Button_toggle>:
void Button_toggle(uint8_t PortNumber,uint8_t PinNumber)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <Button_toggle+0x6>
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	6a 83       	std	Y+2, r22	; 0x02
 Dio_toggle(PortNumber,PinNumber);
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	6a 81       	ldd	r22, Y+2	; 0x02
    16ae:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <Dio_toggle>
}
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <switch_func>:
 */

#include "App.h"

void switch_func(void)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	0f 92       	push	r0
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
	if(Green_state==HIGH)
    16c6:	80 91 6e 00 	lds	r24, 0x006E
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	89 f5       	brne	.+98     	; 0x1730 <switch_func+0x74>
	{
		//both yellow leds toggle for 5 seconds then the cars green led is off and pedestrian red led is on
		yellow_led_pedestrians();
    16ce:	0e 94 a4 06 	call	0xd48	; 0xd48 <yellow_led_pedestrians>
		LED_OFF(Port_A,Pin_0);
    16d2:	81 e4       	ldi	r24, 0x41	; 65
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		LED_OFF(Port_B,Pin_2);
    16da:	82 e4       	ldi	r24, 0x42	; 66
    16dc:	62 e0       	ldi	r22, 0x02	; 2
    16de:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		LED_ON(Port_A,Pin_2);
    16e2:	81 e4       	ldi	r24, 0x41	; 65
    16e4:	62 e0       	ldi	r22, 0x02	; 2
    16e6:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		LED_ON(Port_B,Pin_0);
    16ea:	82 e4       	ldi	r24, 0x42	; 66
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		//function to make a delay for 5 seconds using Timer1 overflow
		delay2();
    16f2:	0e 94 86 06 	call	0xd0c	; 0xd0c <delay2>
		//cars red led is off and pedestrian green led is still on
		LED_OFF(Port_A,Pin_2);
    16f6:	81 e4       	ldi	r24, 0x41	; 65
    16f8:	62 e0       	ldi	r22, 0x02	; 2
    16fa:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		//both yellow leds toggle for 5 seconds
		yellow_led_pedestrians();
    16fe:	0e 94 a4 06 	call	0xd48	; 0xd48 <yellow_led_pedestrians>
		//both yellow leds will be off and we will back to normal mode
		LED_OFF(Port_B,Pin_0);
    1702:	82 e4       	ldi	r24, 0x42	; 66
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		LED_OFF(Port_B,Pin_1);
    170a:	82 e4       	ldi	r24, 0x42	; 66
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		LED_OFF(Port_A,Pin_1);
    1712:	81 e4       	ldi	r24, 0x41	; 65
    1714:	61 e0       	ldi	r22, 0x01	; 1
    1716:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		LED_ON(Port_A,Pin_0);
    171a:	81 e4       	ldi	r24, 0x41	; 65
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		LED_ON(Port_B,Pin_2);
    1722:	82 e4       	ldi	r24, 0x42	; 66
    1724:	62 e0       	ldi	r22, 0x02	; 2
    1726:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		delay2();
    172a:	0e 94 86 06 	call	0xd0c	; 0xd0c <delay2>
    172e:	99 c0       	rjmp	.+306    	; 0x1862 <switch_func+0x1a6>

	}
	else if(Yellow_state== HIGH)
    1730:	80 91 6d 00 	lds	r24, 0x006D
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	09 f0       	breq	.+2      	; 0x173a <switch_func+0x7e>
    1738:	41 c0       	rjmp	.+130    	; 0x17bc <switch_func+0x100>
	{
		//both yellow leds will stop and toggle for more 5 seconds
		LED_OFF(Port_A,Pin_1);
    173a:	81 e4       	ldi	r24, 0x41	; 65
    173c:	61 e0       	ldi	r22, 0x01	; 1
    173e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		LED_OFF(Port_B,Pin_1);
    1742:	82 e4       	ldi	r24, 0x42	; 66
    1744:	61 e0       	ldi	r22, 0x01	; 1
    1746:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		yellow_led_pedestrians();
    174a:	0e 94 a4 06 	call	0xd48	; 0xd48 <yellow_led_pedestrians>
		//cars red led will be on and pedestrian green led will be on for 5 seconds
		LED_ON(Port_A,Pin_2);
    174e:	81 e4       	ldi	r24, 0x41	; 65
    1750:	62 e0       	ldi	r22, 0x02	; 2
    1752:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		LED_ON(Port_B,Pin_0);
    1756:	82 e4       	ldi	r24, 0x42	; 66
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		LED_OFF(Port_B,Pin_2);
    175e:	82 e4       	ldi	r24, 0x42	; 66
    1760:	62 e0       	ldi	r22, 0x02	; 2
    1762:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		//function to make a delay for 5 seconds using Timer1 overflow
		delay2();
    1766:	0e 94 86 06 	call	0xd0c	; 0xd0c <delay2>
		// both yellow will toggle again for 5 seconds then back to normal mode
		yellow_led_pedestrians();
    176a:	0e 94 a4 06 	call	0xd48	; 0xd48 <yellow_led_pedestrians>
		LED_OFF(Port_B,Pin_0);
    176e:	82 e4       	ldi	r24, 0x42	; 66
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		LED_ON(Port_B,Pin_2);
    1776:	82 e4       	ldi	r24, 0x42	; 66
    1778:	62 e0       	ldi	r22, 0x02	; 2
    177a:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		LED_ON(Port_A,Pin_0);
    177e:	81 e4       	ldi	r24, 0x41	; 65
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		LED_OFF(Port_A,Pin_2);
    1786:	81 e4       	ldi	r24, 0x41	; 65
    1788:	62 e0       	ldi	r22, 0x02	; 2
    178a:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		delay2();
    178e:	0e 94 86 06 	call	0xd0c	; 0xd0c <delay2>
		LED_OFF(Port_A,Pin_0);
    1792:	81 e4       	ldi	r24, 0x41	; 65
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		yellow_led_cars_toggle();
    179a:	0e 94 52 07 	call	0xea4	; 0xea4 <yellow_led_cars_toggle>
		LED_ON(Port_A,Pin_2);
    179e:	81 e4       	ldi	r24, 0x41	; 65
    17a0:	62 e0       	ldi	r22, 0x02	; 2
    17a2:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		LED_ON(Port_B,Pin_0);
    17a6:	82 e4       	ldi	r24, 0x42	; 66
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		delay2();
    17ae:	0e 94 86 06 	call	0xd0c	; 0xd0c <delay2>
		LED_OFF(Port_A,Pin_2);
    17b2:	81 e4       	ldi	r24, 0x41	; 65
    17b4:	62 e0       	ldi	r22, 0x02	; 2
    17b6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
    17ba:	53 c0       	rjmp	.+166    	; 0x1862 <switch_func+0x1a6>
		//	Dio_read(Port_B,Pin_0,&Green_state2);
	}
	else if(Red_state==HIGH)
    17bc:	80 91 71 00 	lds	r24, 0x0071
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <switch_func+0x10a>
    17c4:	4c c0       	rjmp	.+152    	; 0x185e <switch_func+0x1a2>
	{
		//cars red led on and pedestrian green on for 5 more seconds
		LED_ON(Port_B,Pin_0);
    17c6:	82 e4       	ldi	r24, 0x42	; 66
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		LED_ON(Port_A,Pin_2);
    17ce:	81 e4       	ldi	r24, 0x41	; 65
    17d0:	62 e0       	ldi	r22, 0x02	; 2
    17d2:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		Dio_read(Port_B,Pin_0,&Green_state2);
    17d6:	20 e7       	ldi	r18, 0x70	; 112
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	82 e4       	ldi	r24, 0x42	; 66
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	a9 01       	movw	r20, r18
    17e0:	0e 94 a8 08 	call	0x1150	; 0x1150 <Dio_read>
		//function to make a delay for 5 seconds using Timer1 overflow
		delay2();
    17e4:	0e 94 86 06 	call	0xd0c	; 0xd0c <delay2>
		Dio_read(Port_B,Pin_0,&Green_state2);
    17e8:	20 e7       	ldi	r18, 0x70	; 112
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	82 e4       	ldi	r24, 0x42	; 66
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	a9 01       	movw	r20, r18
    17f2:	0e 94 a8 08 	call	0x1150	; 0x1150 <Dio_read>
		//cars red led off
		LED_OFF(Port_A,Pin_2);
    17f6:	81 e4       	ldi	r24, 0x41	; 65
    17f8:	62 e0       	ldi	r22, 0x02	; 2
    17fa:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		Dio_read(Port_B,Pin_0,&Green_state2);
    17fe:	20 e7       	ldi	r18, 0x70	; 112
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	82 e4       	ldi	r24, 0x42	; 66
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	a9 01       	movw	r20, r18
    1808:	0e 94 a8 08 	call	0x1150	; 0x1150 <Dio_read>
		// both yellow will toggle again for 5 seconds and pedestrian green led is off then back to normal mode
		yellow_led_pedestrians();
    180c:	0e 94 a4 06 	call	0xd48	; 0xd48 <yellow_led_pedestrians>
		LED_OFF(Port_B,Pin_0);
    1810:	82 e4       	ldi	r24, 0x42	; 66
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		//back to normal mode again
		LED_ON(Port_A,Pin_0);
    1818:	81 e4       	ldi	r24, 0x41	; 65
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		LED_ON(Port_B,Pin_2);
    1820:	82 e4       	ldi	r24, 0x42	; 66
    1822:	62 e0       	ldi	r22, 0x02	; 2
    1824:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		delay2();
    1828:	0e 94 86 06 	call	0xd0c	; 0xd0c <delay2>
		LED_OFF(Port_A,Pin_0);
    182c:	81 e4       	ldi	r24, 0x41	; 65
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		yellow_led_cars_toggle();
    1834:	0e 94 52 07 	call	0xea4	; 0xea4 <yellow_led_cars_toggle>
		LED_OFF(Port_B,Pin_2);
    1838:	82 e4       	ldi	r24, 0x42	; 66
    183a:	62 e0       	ldi	r22, 0x02	; 2
    183c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		LED_ON(Port_A,Pin_2);
    1840:	81 e4       	ldi	r24, 0x41	; 65
    1842:	62 e0       	ldi	r22, 0x02	; 2
    1844:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		LED_ON(Port_B,Pin_0);
    1848:	82 e4       	ldi	r24, 0x42	; 66
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		delay2();
    1850:	0e 94 86 06 	call	0xd0c	; 0xd0c <delay2>
		LED_OFF(Port_A,Pin_2);
    1854:	81 e4       	ldi	r24, 0x41	; 65
    1856:	62 e0       	ldi	r22, 0x02	; 2
    1858:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <switch_func+0x1a6>
	}
	else if(Red_state==HIGH && Green_state2 == HIGH)
    185e:	80 91 71 00 	lds	r24, 0x0071
	{
		//Do nothing
	}
	//	main();
}
    1862:	0f 90       	pop	r0
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <__vector_1>:

ISR(INT0_vect)
{
    186a:	1f 92       	push	r1
    186c:	0f 92       	push	r0
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	0f 92       	push	r0
    1872:	11 24       	eor	r1, r1
    1874:	2f 93       	push	r18
    1876:	3f 93       	push	r19
    1878:	4f 93       	push	r20
    187a:	5f 93       	push	r21
    187c:	6f 93       	push	r22
    187e:	7f 93       	push	r23
    1880:	8f 93       	push	r24
    1882:	9f 93       	push	r25
    1884:	af 93       	push	r26
    1886:	bf 93       	push	r27
    1888:	ef 93       	push	r30
    188a:	ff 93       	push	r31
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
	switch_func(); // call the function that will set the pedestrian mode
    1894:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <switch_func>

}
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	ff 91       	pop	r31
    189e:	ef 91       	pop	r30
    18a0:	bf 91       	pop	r27
    18a2:	af 91       	pop	r26
    18a4:	9f 91       	pop	r25
    18a6:	8f 91       	pop	r24
    18a8:	7f 91       	pop	r23
    18aa:	6f 91       	pop	r22
    18ac:	5f 91       	pop	r21
    18ae:	4f 91       	pop	r20
    18b0:	3f 91       	pop	r19
    18b2:	2f 91       	pop	r18
    18b4:	0f 90       	pop	r0
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	0f 90       	pop	r0
    18ba:	1f 90       	pop	r1
    18bc:	18 95       	reti

000018be <INT0_Init>:
void INT0_Init(void)
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
	SREG  &= ~(1<<7);                   // Disable interrupts by clearing I-bit
    18c6:	af e5       	ldi	r26, 0x5F	; 95
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	ef e5       	ldi	r30, 0x5F	; 95
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	8f 77       	andi	r24, 0x7F	; 127
    18d2:	8c 93       	st	X, r24
	DDRD  &= (~(1<<PD2));               // Configure INT0/PD2 as input pin
    18d4:	a1 e3       	ldi	r26, 0x31	; 49
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e1 e3       	ldi	r30, 0x31	; 49
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	8b 7f       	andi	r24, 0xFB	; 251
    18e0:	8c 93       	st	X, r24
	PORTD |=(1<<PD2);                   //pull up resistor configuration
    18e2:	a2 e3       	ldi	r26, 0x32	; 50
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e2 e3       	ldi	r30, 0x32	; 50
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	84 60       	ori	r24, 0x04	; 4
    18ee:	8c 93       	st	X, r24
	GICR  |= (1<<INT0);                 // Enable external interrupt pin INT0
    18f0:	ab e5       	ldi	r26, 0x5B	; 91
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	eb e5       	ldi	r30, 0x5B	; 91
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	80 64       	ori	r24, 0x40	; 64
    18fc:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC00) | (1<<ISC01);   // Trigger INT0 with the raising edge
    18fe:	a5 e5       	ldi	r26, 0x55	; 85
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e5 e5       	ldi	r30, 0x55	; 85
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	83 60       	ori	r24, 0x03	; 3
    190a:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
    190c:	af e5       	ldi	r26, 0x5F	; 95
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ef e5       	ldi	r30, 0x5F	; 95
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	80 68       	ori	r24, 0x80	; 128
    1918:	8c 93       	st	X, r24
}
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <App_start>:


void App_start(void)
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
	INT0_Init();                // Enable external INT0
    1928:	0e 94 5f 0c 	call	0x18be	; 0x18be <INT0_Init>
	//initialize all cars leds
	LED_init(Port_A,Pin_0);
    192c:	81 e4       	ldi	r24, 0x41	; 65
    192e:	60 e0       	ldi	r22, 0x00	; 0
    1930:	0e 94 ce 0a 	call	0x159c	; 0x159c <LED_init>
	LED_init(Port_A,Pin_1);
    1934:	81 e4       	ldi	r24, 0x41	; 65
    1936:	61 e0       	ldi	r22, 0x01	; 1
    1938:	0e 94 ce 0a 	call	0x159c	; 0x159c <LED_init>
	LED_init(Port_A,Pin_2);
    193c:	81 e4       	ldi	r24, 0x41	; 65
    193e:	62 e0       	ldi	r22, 0x02	; 2
    1940:	0e 94 ce 0a 	call	0x159c	; 0x159c <LED_init>

	//initialize all pedestrian leds
	LED_init(Port_B,Pin_0);
    1944:	82 e4       	ldi	r24, 0x42	; 66
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	0e 94 ce 0a 	call	0x159c	; 0x159c <LED_init>
	LED_init(Port_B,Pin_1);
    194c:	82 e4       	ldi	r24, 0x42	; 66
    194e:	61 e0       	ldi	r22, 0x01	; 1
    1950:	0e 94 ce 0a 	call	0x159c	; 0x159c <LED_init>
	LED_init(Port_B,Pin_2);
    1954:	82 e4       	ldi	r24, 0x42	; 66
    1956:	62 e0       	ldi	r22, 0x02	; 2
    1958:	0e 94 ce 0a 	call	0x159c	; 0x159c <LED_init>


	while(1)
	{
		//cars green led on for and pedestrian red led on 5 seconds
		LED_ON(Port_A,Pin_0);
    195c:	81 e4       	ldi	r24, 0x41	; 65
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		LED_ON(Port_B,Pin_2);
    1964:	82 e4       	ldi	r24, 0x42	; 66
    1966:	62 e0       	ldi	r22, 0x02	; 2
    1968:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		Button_read(Port_A,Pin_0,&Green_state);
    196c:	2e e6       	ldi	r18, 0x6E	; 110
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	81 e4       	ldi	r24, 0x41	; 65
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	a9 01       	movw	r20, r18
    1976:	0e 94 22 0b 	call	0x1644	; 0x1644 <Button_read>
		//function to make a delay for 5 seconds using Timer0 overflow
		delay1();
    197a:	0e 94 6d 06 	call	0xcda	; 0xcda <delay1>
		//cars green led is off
		LED_OFF(Port_A,Pin_0);
    197e:	81 e4       	ldi	r24, 0x41	; 65
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		Button_read(Port_A,Pin_0,&Green_state);
    1986:	2e e6       	ldi	r18, 0x6E	; 110
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	81 e4       	ldi	r24, 0x41	; 65
    198c:	60 e0       	ldi	r22, 0x00	; 0
    198e:	a9 01       	movw	r20, r18
    1990:	0e 94 22 0b 	call	0x1644	; 0x1644 <Button_read>
		//cars yellow led toggle for 5 seconds then stop
		yellow_led_cars_toggle();
    1994:	0e 94 52 07 	call	0xea4	; 0xea4 <yellow_led_cars_toggle>
		//cars red led is on and pedestrian green led is on and pedestrian red led is off
		LED_ON(Port_A,Pin_2);
    1998:	81 e4       	ldi	r24, 0x41	; 65
    199a:	62 e0       	ldi	r22, 0x02	; 2
    199c:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		LED_ON(Port_B,Pin_0);
    19a0:	82 e4       	ldi	r24, 0x42	; 66
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		LED_OFF(Port_B,Pin_2);
    19a8:	82 e4       	ldi	r24, 0x42	; 66
    19aa:	62 e0       	ldi	r22, 0x02	; 2
    19ac:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		Button_read(Port_A,Pin_2,&Red_state);
    19b0:	21 e7       	ldi	r18, 0x71	; 113
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e4       	ldi	r24, 0x41	; 65
    19b6:	62 e0       	ldi	r22, 0x02	; 2
    19b8:	a9 01       	movw	r20, r18
    19ba:	0e 94 22 0b 	call	0x1644	; 0x1644 <Button_read>
		//function to make a delay for 5 seconds using Timer0 overflow
		delay1();
    19be:	0e 94 6d 06 	call	0xcda	; 0xcda <delay1>
		//cars red led is off and pedestrian green led is off and pedestrian red led is on
		LED_OFF(Port_A,Pin_2);
    19c2:	81 e4       	ldi	r24, 0x41	; 65
    19c4:	62 e0       	ldi	r22, 0x02	; 2
    19c6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		LED_OFF(Port_B,Pin_0);
    19ca:	82 e4       	ldi	r24, 0x42	; 66
    19cc:	60 e0       	ldi	r22, 0x00	; 0
    19ce:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LED_OFF>
		LED_ON(Port_B,Pin_2);
    19d2:	82 e4       	ldi	r24, 0x42	; 66
    19d4:	62 e0       	ldi	r22, 0x02	; 2
    19d6:	0e 94 df 0a 	call	0x15be	; 0x15be <LED_ON>
		Button_read(Port_A,Pin_2,&Red_state);
    19da:	21 e7       	ldi	r18, 0x71	; 113
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	81 e4       	ldi	r24, 0x41	; 65
    19e0:	62 e0       	ldi	r22, 0x02	; 2
    19e2:	a9 01       	movw	r20, r18
    19e4:	0e 94 22 0b 	call	0x1644	; 0x1644 <Button_read>
		//cars yellow led toggle for 5 seconds then stop then we restart normal mode again
		yellow_led_cars_toggle();
    19e8:	0e 94 52 07 	call	0xea4	; 0xea4 <yellow_led_cars_toggle>
    19ec:	b7 cf       	rjmp	.-146    	; 0x195c <App_start+0x3c>

000019ee <main>:
 */

#include "Application/App.h"
uint8_t high=1;
int main(void)
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
	App_start();
    19f6:	0e 94 90 0c 	call	0x1920	; 0x1920 <App_start>
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
   {
	   Dio_write(Port_A,Pin_0,0);
	   LED_ON(Port_B,Pin_2);
   }
   */
}
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <__prologue_saves__>:
    1a04:	2f 92       	push	r2
    1a06:	3f 92       	push	r3
    1a08:	4f 92       	push	r4
    1a0a:	5f 92       	push	r5
    1a0c:	6f 92       	push	r6
    1a0e:	7f 92       	push	r7
    1a10:	8f 92       	push	r8
    1a12:	9f 92       	push	r9
    1a14:	af 92       	push	r10
    1a16:	bf 92       	push	r11
    1a18:	cf 92       	push	r12
    1a1a:	df 92       	push	r13
    1a1c:	ef 92       	push	r14
    1a1e:	ff 92       	push	r15
    1a20:	0f 93       	push	r16
    1a22:	1f 93       	push	r17
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	ca 1b       	sub	r28, r26
    1a2e:	db 0b       	sbc	r29, r27
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	09 94       	ijmp

00001a3c <__epilogue_restores__>:
    1a3c:	2a 88       	ldd	r2, Y+18	; 0x12
    1a3e:	39 88       	ldd	r3, Y+17	; 0x11
    1a40:	48 88       	ldd	r4, Y+16	; 0x10
    1a42:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a44:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a46:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a48:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a4e:	b9 84       	ldd	r11, Y+9	; 0x09
    1a50:	c8 84       	ldd	r12, Y+8	; 0x08
    1a52:	df 80       	ldd	r13, Y+7	; 0x07
    1a54:	ee 80       	ldd	r14, Y+6	; 0x06
    1a56:	fd 80       	ldd	r15, Y+5	; 0x05
    1a58:	0c 81       	ldd	r16, Y+4	; 0x04
    1a5a:	1b 81       	ldd	r17, Y+3	; 0x03
    1a5c:	aa 81       	ldd	r26, Y+2	; 0x02
    1a5e:	b9 81       	ldd	r27, Y+1	; 0x01
    1a60:	ce 0f       	add	r28, r30
    1a62:	d1 1d       	adc	r29, r1
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
    1a6e:	ed 01       	movw	r28, r26
    1a70:	08 95       	ret

00001a72 <_exit>:
    1a72:	f8 94       	cli

00001a74 <__stop_program>:
    1a74:	ff cf       	rjmp	.-2      	; 0x1a74 <__stop_program>
